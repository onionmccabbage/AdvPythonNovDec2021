Python Review 3 for 1hr 45min - we'll take tea break at 3:00 so this exercise ends at 3:45
===============
There is a REST API here:
http://api.openweathermap.org/data/2.5/weather?q=athlone,ie&units=metric&APPID=48f2d5e18b0d2bc50519b58cce6409f1
You wll pass in city and country values then show the results for description, temperature and wind speed/direction

Architecture:
Use separate modules for individual functionalilty
Use classes and/or functions
Use a client/server, e.g. client calls the API then sends relevant data to your server, which puts into storage (text-file, DB, you choose)
Also provide a means to retrieve historical records (from the DB, file etc.)

very simple unit tests

Details:
In a new package, write modules to implement a weather service and other related functionality
You can use the 'openweathermap' end-point API to get the current weather (as JSON):
(Remember to import requests)

In your code, ask the user to input a city and a country (athlone and ie above) and inject them into the url
(You could also pass these in as sys.argv parameters, or provide defaults in case they are missing)
Validate that they entered a non-empty string for city, and 2 or 3 letters for country

Make a 'get' request to the openweathermap API, using the city and country values entered by the user (or as sys.argv)
Get hold of the response text from JSON as a Python structure
Print the weather description, temperature, wind-speed and wind-direction
  e.g. if your returned data structure is called 'weather', do something like this: 
	desc = weather['weather'][0]['description']
    	temp = weather['main']['temp']
   	wspd = weather['wind']['speed']
    	wdir = weather['wind']['deg']

For every successful weather request, append the results to a file (json.dumps or pickle.dumps) or database

Optional:
Validate the city and country by checking against a tuple of permitted values
Write a custom generator which yields a number of city/country pairs
Use this generator to make weather requests for the __next__ city/country pair
Append the following 'city, country' values into a text file (e.g. via your generator):
'''Athlone,ie
Galway,ie
Hull,uk
Canberra,aus
Berlin,de
Madrid,es'''
Read in these city/country pairs and for each make a request for the current weather
(You will need to use 'readline' rather than 'read')

Write a 'Weather' class and populate it from some retrieved values (e.g. description, temperature, wind)
Write an encoder class to JSON Encode your Weather class
Also write a Decoder class to retrieve the weather